/// url = https://smartforms.csiro.au/ig/StructureMap/AUeReqForm
/// name = "AUeReqForm"
/// status = draft
/// version = 0.1

map "https://smartforms.csiro.au/ig/StructureMap/AUeReqForm" = "AUeReqForm"

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target
uses "http://hl7.org/fhir/StructureDefinition/AllergyIntolerance" as target

group bundleMap(source src : QuestionnaireResponse, target bundle : Bundle) {
    src -> bundle.id = uuid() "bundle-id";
    src -> bundle.type = 'transaction' "bundle-type";

  // Establish root variable
  src.item as rootItem where (linkId = 'tab-container') then rootContent(src, rootItem, bundle);
}
// Establish 2nd level group variables: Clinical summary content, Service request
group rootContent(source src: QuestionnaireResponse, source rootItem, target bundle: Bundle) {
  rootItem.item as clinicalGroupItem where (linkId = 'clinicalsummary') then clinicalGroupContent(src, clinicalGroupItem, bundle);
  }

  // Establish 3rd level group variables: Allergy, Problem/Diagnosis, Device
group clinicalGroupContent(source src: QuestionnaireResponse, source clinicalGroupItem, target bundle: Bundle) {
  clinicalGroupItem.item as allergyGroupItem where (linkId = 'clinicalsummary-adversereaction') then allergyGroupContent(src, allergyGroupItem, bundle);
  }
  
  // Allergy Intolerance
group allergyGroupContent(source src: QuestionnaireResponse, source allergyGroupItem, target allergy: AllergyIntolerance) {
  allergyGroupItem -> allergy.id = uuid();
  }




  group allergyGroupContent(source src: QuestionnaireResponse, source allergyGroupItem, target bundle: Bundle) {
    clinicalGroupItem.item as allergyItem where (linkId = 'clinicalsummary-adversereaction') -> bundle.entry as entry, entry.resource = create('AllergyIntolerance') as allergy
    then allergyTransform(src, allergyItem, allergy);
    }
  

group allergyTransform(source src: QuestionnaireResponse, source allergyItem, target allergy: AllergyIntolerance){
  allergyItem -> allergy.id = uuid();
  allergyItem.item as substanceItem where (linkId = 'clinicalsummary-adversereaction-substance') then substanceContent(src, substanceItem, allergy);
}

group substanceContent(source src: QuestionnaireResponse, source substanceItem, target allergy: AllergyIntolerance){
    substanceItem.answer as substanceAnswer then SetValueCodeableConceptFromAnswer(substanceAnswer, allergy);
  }

group SetValueCodeableConceptFromAnswer(source substanceAnswer, target allergy: AllergyIntolerance) {
  substanceAnswer -> allergy.code = create('CodeableConcept') as newCC then {
    substanceAnswer.value as coding -> newCC.coding = coding as newCoding;
  }
}


}




}


    src.item as allergyGroupItem where (Item1.linkId = 'clinicalsummary-adversereaction') then allergyGroupContent(src, allergyGroupItem, bundle);
}

group allergyGroupContent(source src: QuestionnaireResponse, source allergyGroupItem, target bundle){
  allergyGroupItem.item as substanceItem where (linkId = 'clinicalsummary-adversereaction-substance') 
}

group rootContent(source qResponse: questionnaireResponse, source rootItem, target bundle) {
  rootItem.item as groupItem then 
    groupContent(qResponse, groupItem, bundle);







map "https://smartforms.csiro.au/ig/StructureMap/AUeReqForm" = "AUeReqForm"

uses "http://hl7.org/fhir/StructureDefinition/QuestionnaireResponse" as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target
uses "http://hl7.org/fhir/StructureDefinition/AllergyIntolerance" as target

group bundleMap(source src : QuestionnaireResponse, target bundle : Bundle) {
    src -> bundle.id = uuid() "bundle-id";
    src -> bundle.type = 'transaction' "bundle-type";

  // For Allergy item groups, create a new entry and put AllergyIntolerance resources in it
  src.item as Item1 where (Item1.linkId = 'clinicalsummary-adversereaction') -> bundle.entry as entry, entry.resource = create("AllergyIntolerance") as Allergy then allergyMap(src, Allergy);
}

group allergyMap(source src: QuestionnaireResponse, target Allergy: AllergyIntolerance) {
 // src -> Allergy.id = uuid();
  src.item as Item2 where (Item2.linkId = 'clinicalsummary-adversereaction-substance') -> Allergy.id = uuid();
 // , Item.answer as answer, answer.valueCoding as substance -> Allergy.code = cc(substance)
}

answerItem.answer as answer -> observation.value = create('CodeableConcept') as newCC then {
  answer.value as coding -> newCC.coding = coding as newCoding;
};



src.item as item1 where (item1.linkId = "tab-container"), item1.item as item2 where (linkId = "clinicalsummary"), item2.item as item3 where (linkId = "clinicalsummary-adversereaction"), item3.item as item4 where (linkId = "clinicalsummary-adversereaction-substance"), item4.answer as QRsubstance -> tgt.code as allergycode, allergycode.coding = QRsubstance

group patientMap(source src : Patient, target bundle : Bundle) {
  src -> bundle.id = uuid() "bundle-id";
  src -> bundle.type = 'transaction' "bundle-type";

  // create a new entry and put the patient resource in it
  src -> bundle.entry as entry, entry.resource = src then
    SetEntryData(src, entry) "prep-entry";
}

group SetEntryData(source src: Patient, target entry)
{
  src.id as patientId log('patientId: ' & %src.id) -> entry.fullUrl = append('http://hl7.org/fhir/us/sdoh-clinicalcare/Patient/', patientId);
  
  src -> entry.request as request then {
    src -> request.method = 'POST' "obsn-request-method";
    src -> request.url = 'Observation' "obsn-request-url";
  } "obsn-entry-request";
}

// sl;vndlvnlnvkv
map "http://mrff-difference.org.au/StructureMap/bioc-pathology-request-map" = "bioc-pathology-request-map"

uses "http://mrff-difference.org.au/StructureDefinition/bioc-pathology-request" alias PREQ as source
uses "http://hl7.org/fhir/StructureDefinition/Bundle" as target
uses "http://mrff-difference.org.au/StructureDefinition/mrff-difference-pathologyrequest" alias MDPATHREQ as target

group bundleMap(source src : PREQ, target tgt : Bundle) {
    src -> tgt.id = uuid() "bundle_id";
    src -> tgt.type = 'collection' "bundle_type";
    src.record as record -> tgt.entry as entry, entry.resource = create("MDPATHREQ") as sReq then
        serviceRequest(record, sReq);
}

group serviceRequest(source src : PRES, target tgt: MDPATHREQ) {
    src.ItemID as req_id -> tgt.id = req_id "id";
    src.PatientID as p_id -> tgt.subject = create("Reference") as r, 
        r.reference = evaluate(p_id, "Patient/"+$this.toString()) "subject";
    src.RequestedTimestamp as reqDateTime -> tgt.authoredOn = reqDateTime "authored_on"; // Time format TBC
    src -> tgt.status = "unknown", tgt.intent = "order" "status_intent"; // TBC
    src -> tgt.category = cc("http://snomed.info/sct", "310074003") as cc, cc.text = "Pathology request" "category";
    
    src.ItemDescription as desc -> tgt.code = create("CodeableConcept") as request_code, request_code.text = desc "request_code";

    src where (src.IsArchived = "Archived") -> tgt.extension = create("Extension") as ext then {
        src -> ext.url = "http://mrff-difference.org.au/StructureDefinition/archive-details" "url";
        src.IsArchived as isArchived -> ext.extension = create("Extension") as isArchivedExt,
            isArchivedExt.url = "isArchived", isArchivedExt.value = (src.IsArchived = "Archived") "isArchived";
    } "archive";
}